In this lecture we make two functionalites which are 'add a note' & 'fetch all notes' of a particular user:

-> For both of them we create a seperate route file note.js->In note.js we first create a route for fetch the note and second for add note

-> Also we add user: property in the Note model

user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'user'
}
-> type: mongoose.Schema.Types.ObjectId:

This specifies that the user field in your schema will be of type ObjectId. ObjectId is a special type in MongoDB that is used to store the unique identifier for each document. It's automatically generated by MongoDB when a document is created.

-> ref: 'user':

Purpose of ref: By setting ref: 'user', you're telling Mongoose that the user field will contain an ObjectId that refers to a document in the User collection. This establishes a relationship between the Note schema (or any schema where this is used) and the User schema.

1). For addnote: router.post('/addnote', fetchuser, [ //router setup with post request,also we call the middleware fetchuser to make sure user is authenticated
    body('title', 'Enter a valid title').isLength({ min: 3 }), //express validtor checks
    body('description', 'Description must be at least 5 characters').isLength({ min: 5 }), //express validtor checks
], async (req, res) => {
    try {
        const errors = validationResult(req);
        // If there are errors, return the error with status 400
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() }); //if any errors till here notify
        }

        const { title, description, tag } = req.body; // Destructuring //here you can say we fetch out these 3 things from the req.body(thunderclient body) through destructuring

        const newNote = new Note({ //make a new variable and make an object for the model class(Note)
            title,
            description,
            tag,
            user: req.user.id //also the user id because to recognize each user with its notes
        });
        const savedNote = await newNote.save(); 
        res.json(savedNote); //send res as json to database
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error occurred");
    }
});

2). For fetch notes: router.get('/fetchallnotes', fetchuser, async (req, res) => { //same router setup
    try {
        const notes = await Note.find({ user: req.user.id }); //find the note according to the corresponding user id
        res.json(notes); //send notes as a json response
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error occurred");
    }
});